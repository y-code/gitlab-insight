// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YouTrackInsight.Entity;

#nullable disable

namespace YouTrackInsight.Entity.Migrations
{
    [DbContext(typeof(YTInsightDbContext))]
    [Migration("20221114190109_add_submitted_timestamp_to_import_task")]
    partial class addsubmittedtimestamptoimporttask
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("YouTrackInsight.Entity.YTIssueImportTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("End")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end");

                    b.Property<bool>("HasError")
                        .HasColumnType("boolean")
                        .HasColumnName("has_error");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cancelled");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTimeOffset?>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.Property<DateTimeOffset?>("Submitted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted");

                    b.HasKey("Id");

                    b.ToTable("issue_import_task");
                });

            modelBuilder.Entity("YouTrackInsight.Entity.YTIssueLinkModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Target")
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("YTIssueModelId")
                        .HasColumnType("text");

                    b.Property<string>("YTIssueModelProjectId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("YTIssueModelId", "YTIssueModelProjectId");

                    b.ToTable("yt_issue_link");
                });

            modelBuilder.Entity("YouTrackInsight.Entity.YTIssueModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ProjectId")
                        .HasColumnType("text")
                        .HasColumnName("project_id");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.HasKey("Id", "ProjectId");

                    b.ToTable("yt_issue");
                });

            modelBuilder.Entity("YouTrackInsight.Entity.YTIssueLinkModel", b =>
                {
                    b.HasOne("YouTrackInsight.Entity.YTIssueModel", null)
                        .WithMany("Links")
                        .HasForeignKey("YTIssueModelId", "YTIssueModelProjectId");
                });

            modelBuilder.Entity("YouTrackInsight.Entity.YTIssueModel", b =>
                {
                    b.Navigation("Links");
                });
#pragma warning restore 612, 618
        }
    }
}
